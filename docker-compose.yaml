services:
  wtwt-front-end:
    platform: linux/amd64
    build:
      context: './wtwt-front-end'
    container_name: what-to-watch-tonight_frontend
    image: what-to-watch-tonight-frontend
    working_dir: /app
    env_file:
      - ./wtwt-front-end/.env
    expose:
      - 3000
    ports:
      - "3000:3000"
    networks:
      - wtwt

  wtwt-back-end:
    platform: linux/amd64
    build: './wtwt-back-end'
    container_name: what-to-watch-tonight_backend
    image: what-to-watch-tonight-backend
    working_dir: /app
    env_file:
      - ./wtwt-back-end/.env
    expose:
      - 5000
    ports:
      - "5000:5000"
    networks:
      - wtwt

  wtwt-ml-model:
    platform: linux/amd64
    build: './wtwt-kmeans-algorithm'
    container_name: what-to-watch-ml-model
    image: what-to-watch-tonight-ml-model
    working_dir: /app
    env_file:
      - ./wtwt-kmeans-algorithm/.env
    expose:
      - 5050
    networks:
      - wtwt

  jaeger:
    platform: linux/amd64
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "8081:16686" 
      - "14268"
      - "14250"
    networks:
      - wtwt

  otel-collector:
    platform: linux/amd64
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "1888:1888"
      - "13133:13133" 
      - "4317:4317"  
      - "4318:4318"   
      - "55679:55679" 
    depends_on:
      - jaeger
    links:
      - jaeger
    networks:
      - wtwt
      
  nginx:
    platform: linux/amd64
    image: nginx:latest
    container_name: nginx_proxy
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./certbot/www:/var/www/certbot
      # - ./certbot/conf:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    networks:
      - wtwt

  certbot:
    platform: linux/amd64
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: >
      sh -c "certbot certonly --webroot --webroot-path=/var/www/certbot 
      --email seuemail@example.com --agree-tos --no-eff-email 
      -d seu-dominio.com -d www.seu-dominio.com"
    networks:
      - wtwt
  keycloak:
    platform: linux/amd64
    image: quay.io/keycloak/keycloak:21.1
    command: start-dev
    ports:
      - 8080:8080
    env_file:
      - ./keycloak/.env.keycloak
    depends_on:
      db:
        condition: service_healthy
    networks:
      - wtwt
  
  db:
    platform: linux/amd64
    image: mysql:8.0.30-debian
    volumes:
      - ./.docker/dbdata:/var/lib/mysql
    env_file:
      - ./mysql/.env.mysql
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 5s
      timeout: 10s
      retries: 3
    networks:
      - wtwt


networks:
  wtwt:
    name: wtwt
    driver: bridge